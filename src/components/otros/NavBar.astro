---
import ThemeToggle from "@/components/otros/ThemeToggle.astro";
import LanguagePicker from "./LanguagePicker.astro";
interface Props {
  navItems: any;
  rutaLeng: string;
  ui: any;
}
const { navItems, rutaLeng, ui } = Astro.props;
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="menu flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    {
      navItems.map((link: Props["navItems"]) => (
        <a
          class="relative block px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <ThemeToggle ui={ui} />
    <LanguagePicker rutaLeng={rutaLeng} />
  </nav>
</header>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute("id");
        const link = document.querySelector(`.menu a[href="#${id}"]`);
        if (entry.isIntersecting) {
          link?.classList.add("text-yellow-500");
        } else {
          link?.classList.remove("text-yellow-500");
        }
      });
    },
    { rootMargin: "-30% 0px -70% 0px" }
  );

  const menuLinks = document.querySelectorAll(".menu a[href^='#']");

  menuLinks.forEach((menuLink) => {
    const hash = menuLink.getAttribute("href") ?? "";
    const target = document.querySelector(hash);
    if (target) {
      observer.observe(target);
    }
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur bg-gray-300/60 dark:bg-gray-800/60 ring-white/10;
    }
  }
</style>
